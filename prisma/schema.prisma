// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ========================
// Authentication & Session
// ========================

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?        @db.Text
  isActive          Boolean        @default(true)
  lastLoginAt       DateTime?
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  tenantMemberships TenantUser[]
  auditLogs         AuditLog[]
  
  // Timestamps
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  
  // Relations
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

// ========================
// Multi-tenancy
// ========================
model Tenant {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        TenantType
  isActive    Boolean  @default(true)
  
  // Hierarchy
  parentId    String?
  parent      Tenant?  @relation("TenantHierarchy", fields: [parentId], references: [id])
  children    Tenant[] @relation("TenantHierarchy")
  
  // Relations
  features    FeatureFlag[]
  users       TenantUser[]
  roles       Role[]
  auditLogs   AuditLog[]
  entities    BaseTenantEntity[]
  
  // Settings
  settings    Json?    // Tenant-specific configuration
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
  
  // Indexes
  @@index([parentId])
  @@unique([name, parentId])
}

enum TenantType {
  TRUST
  SCHOOL
  DEPARTMENT
}

model TenantUser {
  id        String   @id @default(cuid())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  
  // Status
  isActive  Boolean  @default(true)
  
  // Metadata
  metadata  Json?    // Additional user-tenant specific data
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes
  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([roleId])
}

// ========================
// Authorization
// ========================
model Role {
  id           String      @id @default(cuid())
  name         String
  description  String?
  isSystem     Boolean     @default(false)
  
  // Relations
  tenantId     String
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  tenantUsers  TenantUser[]
  
  // Permissions (stored as JSON array of permission strings)
  permissions  Json
  
  // Timestamps
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String
  updatedBy    String
  
  // Indexes
  @@unique([name, tenantId])
}

// ========================
// Feature Flags
// ========================
model FeatureFlag {
  id          String   @id @default(cuid())
  name        String
  description String?
  isEnabled   Boolean  @default(false)
  
  // Relations
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  
  // Settings
  settings    Json?    // Feature-specific settings
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Indexes
  @@unique([name, tenantId])
}

// ========================
// Audit Logging
// ========================
model AuditLog {
  id          String   @id @default(cuid())
  
  // Action details
  action      String   // CRUD operation (create, read, update, delete)
  entityType  String   // Affected entity type (e.g., "User", "Student")
  entityId    String   // Affected entity ID
  
  // Context
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  
  // Additional data
  metadata    Json?    // Additional context (before/after changes, etc.)
  ipAddress   String?
  userAgent   String?
  
  // Timestamp
  timestamp   DateTime @default(now())
  
  // Indexes
  @@index([entityType, entityId])
  @@index([userId])
  @@index([tenantId])
  @@index([timestamp])
}

// ========================
// Base Model for Tenant-Aware Entities
// ========================
model BaseTenantEntity {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
  
  @@index([tenantId])
}
